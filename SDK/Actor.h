//stuff to implement if needed
class Dimension;
class Level;
class ActorFlags;
class ActorDamageSource;
class Block;
class ArmorSlot;
class ItemStack;
class HandSlot;
class ItemStackBase;
class ItemUseMethod;
class MobEffectInstance;
class Attribute;
class Player;
class Mob;
class IMobMovementProxy;
class IActorMovementProxy;
class ActorLocation;
class UIProfanityContext;
class IConstBlockSource;
class BlockLegacy;
class MaterialType;
class ActorDamageCause;
class ChangeDimensionPacket;
class LevelSoundEvent;
class ActorUniqueID;
class ActorEvent;
class EquipmentSlot;
class CompoundTag;
class Packet;
class BlockActor;
class GameType;
class EventPacket;
class Container;
class HashedString;

class Actor {
public:
    virtual void setStatusFlag(ActorFlags a1, bool a2);
    virtual void getLastHurtByMob();
    virtual void setLastHurtByMob(Mob* a1);
    virtual void getLastHurtByPlayer();
    virtual void setLastHurtByPlayer(Player* a1);
    virtual void getLastHurtMob();
    virtual void setLastHurtMob(Actor* a1);
    virtual bool outOfWorld();
    virtual void reloadHardcoded(); //removed
    virtual void reloadHardcodedClient(); //removed
    virtual void initializeComponents(); //removed
    virtual void reloadComponents(); //removed
    virtual void _serverInitItemStackIds();
    virtual void _doInitialMove();
    virtual void hasComponent(HashedString const& a1);
private:
    virtual void D15Func();
    virtual void D16Func();
public:
    virtual void resetUserPos(bool a1);
    virtual void getOwnerEntityType();
    virtual void remove();
    virtual void setPos(Vector3 const& a1);
    virtual void isRuntimePredictedMovementEnabled();
    virtual void getPredictedMovementValues();
    virtual Vector3 getPosition();
    virtual Vector3 getPosPrev();
    virtual Vector3 getPosExtrapolated(float a1);
    virtual Vector3 getAttachPos(ActorLocation a1, float a2);
    virtual Vector3 getFiringPos();
    virtual void move(Vector3 const& a1);
    virtual void move(IActorMovementProxy& a1, Vector3 const& a2);
    virtual float getInterpolatedRidingPosition(float a1);
    virtual float getInterpolatedBodyRot(float a1);
    virtual float getInterpolatedHeadRot(float a1);
    virtual float getInterpolatedBodyYaw(float a1);
    virtual float getYawSpeedInDegreesPerSecond();
    virtual float getInterpolatedWalkAnimSpeed(float a1);
    virtual float getInterpolatedRidingOffset(float a1, int a2);
    virtual void resetInterpolated();
    virtual void updateEntityInside(AABB const& a1);
    virtual void updateEntityInside();
    virtual bool isFireImmune();
    virtual void breaksFallingBlocks();
    virtual void blockedByShield(ActorDamageSource const& a1, Actor& a2);
    virtual bool canDisableShield();
private:
    virtual void function_44();
public:
    virtual void tryTeleportTo(Vector3 const& a1, bool a2, bool a3, int a4, int a5);
    virtual void chorusFruitTeleport(Vector3 const& a1);
    virtual void lerpMotion(Vector3 const& a1);
    virtual void tryCreateAddActorPacket();
    virtual void normalTick();
    virtual void baseTick();
    virtual void passengerTick();
    virtual void positionPassenger(Actor& a1, float a2);
    virtual void startRiding(Actor& a1);
    virtual void addPassenger(Actor& a1);
    virtual void flagPassengerToRemove(Actor& a1);
    virtual void wjaljdwkj();
    virtual void getEntityLocNameString();
    virtual void intersects(Vector3 const& a1, Vector3 const& a2);
    virtual bool isInWall();
    virtual bool isInvisible();
    virtual void canShowNameTag();
    virtual void canExistInPeaceful();
    virtual void setNameTagVisible(bool a1);
    virtual void getNameTag();
    virtual void getNameTagAsHash();
    virtual void getFormattedNameTag();
    virtual void filterFormattedNameTag(UIProfanityContext const& a1);
    virtual void setNameTag(std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void getAlwaysShowNameTag();
    virtual void awdlkjlkwdjl();
    virtual void getScoreTag();
    virtual bool isInWater();
    virtual bool isInLava(IConstBlockSource const& a1);
    virtual bool isUnderLiquid(MaterialType a1);
    virtual bool isOverWater();
    virtual void setBlockMovementSlowdownMultiplier(BlockLegacy const& a1, Vector3 const& a2);
    virtual void resetBlockMovementSlowdownMultiplier();
    virtual void getCameraOffset();
    virtual void getShadowHeightOffs();
    virtual void getShadowRadius();
    virtual void getHeadLookVector(float a1);
    virtual void canSeeInvisible();
    virtual void canSee(Actor const& a1);
    virtual void canSee(Vector3 const& a1);
    virtual void canInteractWithOtherEntitiesInGame();
    virtual bool isSkyLit(float a1);
    virtual void getBrightness(float a1, IConstBlockSource const& a2);
    virtual void interactPreventDefault();
    virtual void playerTouch(Player& a1);
    virtual void onAboveBubbleColumn(bool a1);
    virtual void onInsideBubbleColumn(bool a1);
    virtual bool isImmobile();
    virtual bool isSilent();
    virtual bool isSilentObserver();
    virtual bool isPickable();
    virtual bool isFishable();
    virtual bool isSleeping();
    virtual void setSleeping(bool a1);
    virtual bool isShootable();
    virtual void setSneaking(bool a1);
    virtual bool isBlocking();
    virtual bool isDamageBlocked(ActorDamageSource const& a1);
    virtual bool isAlive();
    virtual bool isOnFire();
    virtual bool isOnHotBlock();
    virtual bool isCreativeModeAllowed();
    virtual bool isSurfaceMob();
    virtual bool isTargetable();
    virtual bool isLocalPlayer();
    virtual bool isRemotePlayer();
    virtual bool isPlayer();
    virtual bool isAffectedByWaterBottle();
    virtual bool canAttack(Actor* a1, bool a2);
    virtual void setTarget(Actor* a1);
    virtual bool isValidTarget(Actor* a1);
    virtual void attack(Actor& a1, ActorDamageCause const& a2);
    virtual void performRangedAttack(Actor& a1, float a2);
    virtual int getEquipmentCount();
    virtual void setOwner(ActorUniqueID a1);
    virtual void setSitting(bool a1);
    virtual void onTame();
    virtual void onFailedTame();
    virtual __int64 getInventorySize();
    virtual __int64 getEquipSlots();
    virtual __int64 getChestSlots();
    virtual void setStanding(bool a1);
    virtual bool canPowerJump();
    virtual void setCanPowerJump(bool a1);
    virtual void isEnchanted();
    virtual void vehicleLanded(Vector3 const& a1, Vector3 const& a2);
    virtual bool shouldRender();
    virtual void playAmbientSound();
    virtual int getAmbientSound();
    virtual bool isInvulnerableTo(ActorDamageSource const& a1);
    virtual __int64 getBlockDamageCause(Block const& a1);
    virtual void animateHurt();
    virtual void doFireHurt(int a1);
    virtual void onLightningHit();
    virtual void onBounceStarted(Vector3 const& a1, Block const& a2);
    virtual void feed(int a1);
    virtual void handleEntityEvent(ActorEvent a1, int a2);
    virtual float getPickRadius();
    virtual int getActorRendererId();
    virtual void spawnAtLocation(int a1, int a2);
    virtual void spawnAtLocation(int a1, int a2, float a3);
    virtual void spawnAtLocation(ItemStack const& a1, float a2);
    virtual void despawn();
    virtual void killed(Actor& a1);
    virtual void awardKillScore(Actor& a1, int a2);
    virtual __int64 setArmor(ArmorSlot a1, ItemStack const& a2);
    virtual __int64 getArmor(ArmorSlot a1);
    virtual __int64 getAllArmor();
    virtual __int64 getArmorMaterialTypeInSlot(ArmorSlot a1);
    virtual __int64 getArmorMaterialTextureTypeInSlot(ArmorSlot a1);
    virtual __int64 getArmorColorInSlot(ArmorSlot a1, int a2);
    virtual __int64 getEquippedSlot(EquipmentSlot a1);
    virtual void setEquippedSlot(EquipmentSlot a1, ItemStack const& a2);
    virtual void setCarriedItem(ItemStack const& a1);
    virtual __int64 getCarriedItem();
    virtual void setOffhandSlot(ItemStack const& a1);
    virtual __int64 getEquippedTotem();
    virtual void consumeTotem();
    virtual void save(CompoundTag& a1);
    virtual void saveWithoutId(CompoundTag& a1);
private:
    virtual void function_165();
public:
    virtual void loadLinks();
    virtual void getEntityTypeId();
    virtual void queryEntityRenderer();
    virtual void getSourceUniqueID();
    virtual void thawFreezeEffect();
    virtual bool canFreeze();
    virtual bool isWearingLeatherArmor();
    virtual AABB getLiquidAABB(MaterialType a1);
    virtual void handleInsidePortal(Vector3 const& a1);
    virtual int getPortalCooldown();
    virtual int getPortalWaitTime();
    virtual bool canChangeDimensionsUsingPortal();
    virtual void changeDimension(uintptr_t a2);
    virtual void changeDimension(ChangeDimensionPacket const& a1);
    virtual Actor* getControllingPlayer();
    virtual void checkFallDamage(float a1, bool a2);
    virtual void causeFallDamage(float a1, float a2, ActorDamageSource a3);
    virtual void handleFallDistanceOnServer(float a1, float a2, bool a3);
    virtual void playSynchronizedSound(LevelSoundEvent a1, Vector3 const& a2, Block const& a3, bool a4);
    virtual void playSynchronizedSound(LevelSoundEvent a1, Vector3 const& a2, int a3, bool a4);
    virtual void onSynchedFlagUpdate(int a1, long a2, long a3);
    virtual void onSynchedDataUpdate(int a1);
    virtual void canAddPassenger(Actor& a1);
    virtual void canPickupItem(ItemStack const& a1);
    virtual void canBePulledIntoVehicle();
    virtual bool inCaravan();
    virtual bool isLeashableType();
    virtual void tickLeash();
    virtual void sendMotionPacketIfNeeded();
    virtual bool canSynchronizeNewEntity();
    virtual void stopRiding(bool a1, bool a2, bool a3);
    virtual void startSwimming();
    virtual void stopSwimming();
private:
    virtual void function_199();
public:
    virtual int getCommandPermissionLevel();
    virtual bool isClientSide();
    virtual __int64 getMutableAttribute(Attribute const& a1);
    virtual __int64 getAttribute(Attribute const& a1);
    virtual int getDeathTime();
    virtual void heal(int a1);
    virtual bool isInvertedHealAndHarm();
    virtual void canBeAffected(unsigned int a1);
    virtual void canBeAffectedByArrow(MobEffectInstance const& a1);
    virtual void onEffectAdded(MobEffectInstance& a1);
    virtual void onEffectUpdated(MobEffectInstance& a1);
    virtual void onEffectRemoved(MobEffectInstance& a1);
    virtual void canObstructSpawningAndBlockPlacement();
    virtual __int64 getAnimationComponent();
    virtual void openContainerComponent(Player& a1);
    virtual void swing();
    virtual void useItem(ItemStackBase& a1, ItemUseMethod a2, bool a3);
    virtual void hasOutputSignal(unsigned char a1);
    virtual __int64 getOutputSignal();
    virtual __int64 getDebugText(std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual float getMapDecorationRotation();
    virtual float getPassengerYRotation(Actor const& a1);
    virtual bool isWorldBuilder();
    virtual bool isCreative();
    virtual bool isAdventure();
    virtual bool isSurvival();
    virtual bool isSpectator();
    virtual bool isAttackableGamemode();
    virtual void add(ItemStack& a1);
    virtual void drop(ItemStack const& a1, bool a2);
    virtual __int64 getInteraction();
    virtual void canDestroyBlock(Block const& a1);
    virtual void setAuxValue(int a1);
    virtual void setSize(float a1, float a2);
    virtual void onOrphan();
    virtual void wobble();
    virtual void wasHurt();
    virtual void startSpinAttack();
    virtual void stopSpinAttack();
    virtual void setDamageNearbyMobs(bool a1);
    virtual void renderDebugServerState(); //removed
    virtual void reloadLootTable();
    virtual void sjsjs(); //removed
    virtual int getDeletionDelayTimeSeconds();
    virtual void kill();
    virtual void die(ActorDamageSource const& a1);
    virtual void shouldDropDeathLoot();
    virtual void shouldTick();
    virtual void applySnapshot(); //removed
    virtual float getNextStep(float a1);
    virtual __int64 getLootTable();
    virtual void onPush(Actor& a1);
    virtual void getLastDeathPos();
    virtual void getLastDeathDimension();
    virtual void hasDiedBefore();
    virtual void doWaterSplashEffect();
    virtual void _shouldProvideFeedbackOnHandContainerItemSet(HandSlot a1, ItemStack const& a2);
    virtual void _shouldProvideFeedbackOnArmorSet(ArmorSlot a1, ItemStack const& a2);
private:
    virtual void function_258();
public:
    virtual void shouldTryMakeStepSound();
    virtual void canMakeStepSound();
    virtual void _hurt(ActorDamageSource const& a1, float a2, bool a3, bool a4);
    virtual void markHurt();
    virtual void _getAnimationComponent(); //removed
private:
    virtual void function_264();
public:
    virtual void kehfkjahkf();
    virtual void _playStepSound(Vector3 const& a1, Block const& a2);
    virtual void _playFlySound(Vector3 const& a1, Block const& a2);
    virtual void _makeFlySound();
    virtual void checkInsideBlocks(float a1);
    virtual void pushOutOfBlocks(Vector3 const& a1);
    virtual void spawnTrailBubbles();
    virtual void updateInsideBlock();
    virtual void _removePassenger(ActorUniqueID const& a1, bool a2, bool a3, bool a4);
    virtual void _onSizeUpdated();
    virtual void _doAutoAttackOnTouch(Actor& a1);
    virtual void knockback(Actor* a1, int a2, float a3, float a4, float a5, float a6, float a7);
    virtual void spawnAnim();
    virtual void setSprinting(bool a1);
    virtual void getHurtSound();
    virtual void getDeathSound();
    virtual float getSpeed();
    virtual void setSpeed(float a1);
    virtual void hurtEffects(ActorDamageSource const& a1, float a2, bool a3, bool a4);
    virtual float getMeleeWeaponDamageBonus(Mob* a1);
    virtual float getMeleeKnockbackBonus();
    virtual void travel(float a1, float a2, float a3, bool a4);
    virtual void applyFinalFriction(float a1, bool a2);
    virtual void aiStep();
    virtual void aiStep(IMobMovementProxy& a1);
    virtual void pushActors();
    virtual void lookAt(Actor* a1, float a2, float a3);
    virtual bool isLookingAtAnEntity();
    virtual void checkSpawnRules(bool a1);
    virtual void checkSpawnObstruction();
    virtual float getAttackAnim(float a1);
    virtual int getItemUseDuration();
    virtual int getItemUseStartupProgress();
    virtual int getItemUseIntervalProgress();
    virtual int getItemUseIntervalAxis();
    virtual int getTimeAlongSwing();
    virtual void ate();
    virtual int getMaxHeadXRot();
    virtual void isAlliedTo(Mob* a1);
    virtual void doHurtTarget(Actor* a1, ActorDamageCause const& a2);
    virtual void canBeControlledByPassenger();
    virtual void leaveCaravan();
    virtual void joinCaravan(Mob* a1);
    virtual void hasCaravanTail();
    virtual __int64 getCaravanHead();
    virtual float getArmorValue();
    virtual float getArmorCoverPercentage();
    virtual float getToughnessValue();
private:
    virtual void function_313();
public:
    virtual void setDamagedArmor(ArmorSlot a1, ItemStack const& a2);
    virtual void sendArmorDamage(std::bitset<4ul> a1);
    virtual void sendArmor(std::bitset<4ul> a1);
    virtual void containerChanged(int a1);
    virtual void updateEquipment();
    virtual void clearEquipment();
    virtual __int64 getAllArmorID();
    virtual __int64 getAllHand();
    virtual __int64 getAllEquipment();
    virtual __int64 getArmorTypeHash();
    virtual void dropEquipmentOnDeath(ActorDamageSource const& a1, int a2);
    virtual void dropEquipmentOnDeath();
    virtual void clearVanishEnchantedItemsOnDeath();
    virtual void sendInventory(bool a1);
    virtual float getDamageAfterEnchantReduction(ActorDamageSource const& a1, float a2);
    virtual float getDamageAfterArmorReduction(ActorDamageSource const& a1, float a2);
    virtual float getDamageAfterResistanceEffect(ActorDamageSource const& a1, float a2);
    virtual void createAIGoals();
    virtual void onBorn(Actor& a1, Actor& a2);
    virtual void setItemSlot(EquipmentSlot a1, ItemStack const& a2);
    virtual void setTransitioningSitting(bool a1);
    virtual void attackAnimation(Actor* a1, float a2);
    virtual int getAttackTime();
    virtual void _getWalkTargetValue(Vector3 const& a1);
    virtual void canExistWhenDisallowMob();
    virtual void ascendLadder();
    virtual void ascendBlockByJumping();
    virtual void descendBlockByCrouching();
    virtual void dropContainer();
    virtual void initBodyControl();
    virtual void jumpFromGround(IConstBlockSource const& a1);
    virtual void jumpFromGround(IMobMovementProxy& a1, IConstBlockSource const& a2);
    virtual void newServerAiStep();
    virtual void _serverAiMobStep();
    virtual void dropBags();
    virtual void tickDeath();
    virtual void updateGliding();
    virtual void _allowAscendingScaffolding();
    virtual void _getAdjustedAABBForSpawnCheck(AABB const& a1, Vector3 const& a2);
    virtual void prepareRegion(); //removed
    virtual void destroyRegion();
    virtual void suspendRegion();
    virtual void resendAllChunks();
    virtual void _fireWillChangeDimension();
    virtual void _fireDimensionChanged();
    virtual void changeDimensionWithCredits(uintptr_t a2);
    virtual void tickWorld(uintptr_t const& a1);
private:
    virtual void function_361();
public:
    virtual int getTickingOffsets();
    virtual void moveView();
    virtual void moveSpawnView(Vector3 const& a1, uintptr_t a3);
    virtual void setName(std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual __int64 getTravelledMethod();
    virtual void checkMovementStats(Vector3 const& a1);
    virtual __int64 getCurrentStructureFeature();
    virtual bool isAutoJumpEnabled();
private:
    virtual void function_370();
public:
    virtual void resetRot();
    virtual void isInTrialMode();
    virtual void hasResource(int a1);
    virtual void completeUsingItem();
    virtual void startDestroying();
    virtual void stopDestroying();
    virtual void openPortfolio();
    virtual void openBook(int a1, bool a2, int a3, BlockActor* a4);
    virtual void openTrading(ActorUniqueID const& a1, bool a2);
    virtual bool canOpenContainerScreen();
    virtual void openChalkboard(); //removed
    virtual void openNpcInteractScreen(uintptr_t a1);
    virtual void openInventory();
    virtual void displayChatMessage(std::string const&);
    virtual void displayClientMessage(std::string const&);
    virtual void displayTextObjectMessage(std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void displayTextObjectWhisperMessage(std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void displayTextObjectWhisperMessage2(std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void displayWhisperMessage(std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
private:
    virtual void function_390();
    virtual void function_391();
public:
    virtual void canStartSleepInBed();
    virtual int getSleepTimer();
    virtual int getPreviousTickSleepTimer();
    virtual void openSign(Vector3 const& a1, bool a2);
    virtual void playEmote(std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual bool isHostingPlayer();
    virtual bool isLoading();
    virtual bool isPlayerInitialized();
    virtual void stopLoading();
    virtual void registerTrackedBoss(ActorUniqueID a1);
    virtual void unRegisterTrackedBoss(ActorUniqueID a1);
    virtual void setPlayerGameType(GameType a1);
    virtual void initHUDContainerManager();
    virtual void _crit(Actor& a1);
    virtual __int64 getEventing();
    virtual int getUserId();
    virtual void sendEventPacket(EventPacket& a1);
    virtual void addExperience(int a1);
    virtual void addLevels(int a1);
private:
    virtual void function_411();
    virtual void function_412();
public:
    virtual void inventoryChanged(Container& a1, int a2, ItemStack const& a3, ItemStack const& a4, bool a5);
private:
    virtual void function_414();
public:
    virtual void deleteContainerManager();
    virtual void isActorRelevant(Actor const& a1);
private:
    virtual void function_417();
public:
    virtual void onSuspension();
    virtual void onLinkedSlotsChanged();
    virtual void startCooldown(); //removed
    virtual int getItemCooldownLeft(HashedString const& a1);
    virtual int getItemCooldownLeft(unsigned long a1);
    virtual int getMaxItemCooldownLeft();
    virtual bool isItemOnCooldown(HashedString const& a1);
private:
    virtual void function_425();
    virtual void function_426();
public:
    virtual void sendNetworkPacket(Packet& a1);
private:
    virtual void function_428();
    virtual void function_429();
    virtual void function_430();
    virtual void function_431();
public:
    virtual void reportMovementTelemetry(uintptr_t a1);
    virtual bool isSimulated();
    virtual void fkfkf(); //removed
    virtual __int64 getMovementSettings();
    virtual void addSavedChunk(uintptr_t const& a1);
    virtual void getMaxChunkBuildRadius();
private:
    virtual void function_438();
public:
    virtual void _createChunkSource(uintptr_t& a1);
    virtual void setAbilities(uintptr_t const& a1);
};